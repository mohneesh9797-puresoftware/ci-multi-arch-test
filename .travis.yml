# dist: xenial is required to run "multiarch/qemu-user-static -p yes".
# dist: trusty does not work for that.
# I am not sure if the reason is the trusty's Linux kernel is old.
# "multiarch/qemu-user-static" image uses Linux kernel feature binfmt_misc
# in it.
dist: xenial
# This means your current language mode.
language: c
services: docker
os: linux

# Definitions using YAML's anchor (&) and reference (*).
.com.github.junaruga.ci-multi-arch-test.matrix-definitions:
  # Recommended way 1. It's easy to implement.
  # But the way using "-p yes" (binfmt_misc persistent option)
  # might be slower than below alternative ways.
  - &test_in_container
    # language: bash or generic is good to run container.
    language: bash
    install:
      - ls /proc/sys/fs/binfmt_misc/
      - |
        if [ "$(uname -m)" = x86_64 ]; then
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        fi
      - ls /proc/sys/fs/binfmt_misc/
      - |
        travis_retry docker build --rm -t sample \
          --build-arg BASE_IMAGE=${BASE_IMAGE} \
          -f Dockerfile-${OS_NAME} \
          .
    script:
      - docker run --rm -t sample ./sample_test.sh
  # A case to check only "uname"'s result without building a container.
  - &test_simple_in_container
    language: bash
    install:
      - ls /proc/sys/fs/binfmt_misc/
      - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - ls /proc/sys/fs/binfmt_misc/
    script:
      - docker run --rm -t "${BASE_IMAGE}" uname -a
  # Recommended way 2. This way does not use binfmt_misc persistent option.
  # It uses multiarch/qemu-user-static:$arch container in Dockerfile.
  - &test_in_container_qemu_interpreter
    language: bash
    install:
      - ls /proc/sys/fs/binfmt_misc/
      - docker run --rm --privileged multiarch/qemu-user-static:register --reset
      - ls /proc/sys/fs/binfmt_misc/
      - |
        travis_retry docker build --rm -t sample \
          --build-arg ARCH=${ARCH} \
          --build-arg BASE_IMAGE=${BASE_IMAGE} \
          -f Dockerfile-${OS_NAME} \
          .
    script:
      - docker run --rm -t sample ./sample_test.sh
  # The way to use compatible os images (multiarch's ubuntu image etc) is deprecated.
  # But it might be faster than above recommended ways.
  - &test_in_container_compatible_image
    language: bash
    install:
      - ls /proc/sys/fs/binfmt_misc/
      - docker run --rm --privileged multiarch/qemu-user-static:register --reset
      - ls /proc/sys/fs/binfmt_misc/
      - |
        travis_retry docker build --rm -t sample \
          --build-arg BASE_IMAGE=${BASE_IMAGE} \
          -f Dockerfile-${OS_NAME} \
          .
    script:
      - docker run --rm -t sample ./sample_test.sh
  - &inspect_image
    addons:
      apt:
        config:
          retries: true
        update: true
        sources:
          - sourceline: 'ppa:projectatomic/ppa'
        packages:
          - jq
          - skopeo
    before_install:
      - BASE_IMAGE="$BASE_IMAGE@$(script/print-manifest-arch-digest.sh "$BASE_IMAGE" "$MANIFEST_ARCH")"

matrix:
  include:
    # Intel, 64-bit, Little-endian
    - name: ubuntu-x86_64-linux-native
    # Intel, 32-bit, Little-endian
    # ARM, 64-bit, Little-endian
    - name: ubuntu-aarch64-linux-native
      arch: arm64
-before_install:
  # Show environment.
  - uname -a
  - id
  - pwd
  - "OS_NAME=${OS_NAME:-ubuntu}"
  - echo OS_NAME=${OS_NAME} BASE_IMAGE=${BASE_IMAGE}
# Logic without container and QEMU.
# This means your current logic.
install: true
script: ./sample_test.sh
branches:
  only:
    - master
